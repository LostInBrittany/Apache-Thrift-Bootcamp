/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.arkea.thrift.data.utilisateur;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Structure utilisateur
 * 
 */
public class Utilisateur implements org.apache.thrift.TBase<Utilisateur, Utilisateur._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Utilisateur");

  private static final org.apache.thrift.protocol.TField PSEUDO_FIELD_DESC = new org.apache.thrift.protocol.TField("pseudo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MOTDEPASSE_FIELD_DESC = new org.apache.thrift.protocol.TField("motdepasse", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UtilisateurStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UtilisateurTupleSchemeFactory());
  }

  private String pseudo; // required
  private String motdepasse; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * pseudo Utilisateur
     */
    PSEUDO((short)1, "pseudo"),
    /**
     * mot de passe
     */
    MOTDEPASSE((short)2, "motdepasse");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PSEUDO
          return PSEUDO;
        case 2: // MOTDEPASSE
          return MOTDEPASSE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PSEUDO, new org.apache.thrift.meta_data.FieldMetaData("pseudo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOTDEPASSE, new org.apache.thrift.meta_data.FieldMetaData("motdepasse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Utilisateur.class, metaDataMap);
  }

  public Utilisateur() {
  }

  public Utilisateur(
    String pseudo,
    String motdepasse)
  {
    this();
    this.pseudo = pseudo;
    this.motdepasse = motdepasse;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Utilisateur(Utilisateur other) {
    if (other.isSetPseudo()) {
      this.pseudo = other.pseudo;
    }
    if (other.isSetMotdepasse()) {
      this.motdepasse = other.motdepasse;
    }
  }

  public Utilisateur deepCopy() {
    return new Utilisateur(this);
  }

  @Override
  public void clear() {
    this.pseudo = null;
    this.motdepasse = null;
  }

  /**
   * pseudo Utilisateur
   */
  public String getPseudo() {
    return this.pseudo;
  }

  /**
   * pseudo Utilisateur
   */
  public void setPseudo(String pseudo) {
    this.pseudo = pseudo;
  }

  public void unsetPseudo() {
    this.pseudo = null;
  }

  /** Returns true if field pseudo is set (has been assigned a value) and false otherwise */
  public boolean isSetPseudo() {
    return this.pseudo != null;
  }

  public void setPseudoIsSet(boolean value) {
    if (!value) {
      this.pseudo = null;
    }
  }

  /**
   * mot de passe
   */
  public String getMotdepasse() {
    return this.motdepasse;
  }

  /**
   * mot de passe
   */
  public void setMotdepasse(String motdepasse) {
    this.motdepasse = motdepasse;
  }

  public void unsetMotdepasse() {
    this.motdepasse = null;
  }

  /** Returns true if field motdepasse is set (has been assigned a value) and false otherwise */
  public boolean isSetMotdepasse() {
    return this.motdepasse != null;
  }

  public void setMotdepasseIsSet(boolean value) {
    if (!value) {
      this.motdepasse = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PSEUDO:
      if (value == null) {
        unsetPseudo();
      } else {
        setPseudo((String)value);
      }
      break;

    case MOTDEPASSE:
      if (value == null) {
        unsetMotdepasse();
      } else {
        setMotdepasse((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PSEUDO:
      return getPseudo();

    case MOTDEPASSE:
      return getMotdepasse();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PSEUDO:
      return isSetPseudo();
    case MOTDEPASSE:
      return isSetMotdepasse();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Utilisateur)
      return this.equals((Utilisateur)that);
    return false;
  }

  public boolean equals(Utilisateur that) {
    if (that == null)
      return false;

    boolean this_present_pseudo = true && this.isSetPseudo();
    boolean that_present_pseudo = true && that.isSetPseudo();
    if (this_present_pseudo || that_present_pseudo) {
      if (!(this_present_pseudo && that_present_pseudo))
        return false;
      if (!this.pseudo.equals(that.pseudo))
        return false;
    }

    boolean this_present_motdepasse = true && this.isSetMotdepasse();
    boolean that_present_motdepasse = true && that.isSetMotdepasse();
    if (this_present_motdepasse || that_present_motdepasse) {
      if (!(this_present_motdepasse && that_present_motdepasse))
        return false;
      if (!this.motdepasse.equals(that.motdepasse))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_pseudo = true && (isSetPseudo());
    builder.append(present_pseudo);
    if (present_pseudo)
      builder.append(pseudo);

    boolean present_motdepasse = true && (isSetMotdepasse());
    builder.append(present_motdepasse);
    if (present_motdepasse)
      builder.append(motdepasse);

    return builder.toHashCode();
  }

  public int compareTo(Utilisateur other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Utilisateur typedOther = (Utilisateur)other;

    lastComparison = Boolean.valueOf(isSetPseudo()).compareTo(typedOther.isSetPseudo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPseudo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pseudo, typedOther.pseudo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMotdepasse()).compareTo(typedOther.isSetMotdepasse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMotdepasse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.motdepasse, typedOther.motdepasse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Utilisateur(");
    boolean first = true;

    sb.append("pseudo:");
    if (this.pseudo == null) {
      sb.append("null");
    } else {
      sb.append(this.pseudo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("motdepasse:");
    if (this.motdepasse == null) {
      sb.append("null");
    } else {
      sb.append(this.motdepasse);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UtilisateurStandardSchemeFactory implements SchemeFactory {
    public UtilisateurStandardScheme getScheme() {
      return new UtilisateurStandardScheme();
    }
  }

  private static class UtilisateurStandardScheme extends StandardScheme<Utilisateur> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Utilisateur struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PSEUDO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pseudo = iprot.readString();
              struct.setPseudoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MOTDEPASSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.motdepasse = iprot.readString();
              struct.setMotdepasseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Utilisateur struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pseudo != null) {
        oprot.writeFieldBegin(PSEUDO_FIELD_DESC);
        oprot.writeString(struct.pseudo);
        oprot.writeFieldEnd();
      }
      if (struct.motdepasse != null) {
        oprot.writeFieldBegin(MOTDEPASSE_FIELD_DESC);
        oprot.writeString(struct.motdepasse);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UtilisateurTupleSchemeFactory implements SchemeFactory {
    public UtilisateurTupleScheme getScheme() {
      return new UtilisateurTupleScheme();
    }
  }

  private static class UtilisateurTupleScheme extends TupleScheme<Utilisateur> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Utilisateur struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPseudo()) {
        optionals.set(0);
      }
      if (struct.isSetMotdepasse()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetPseudo()) {
        oprot.writeString(struct.pseudo);
      }
      if (struct.isSetMotdepasse()) {
        oprot.writeString(struct.motdepasse);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Utilisateur struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.pseudo = iprot.readString();
        struct.setPseudoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.motdepasse = iprot.readString();
        struct.setMotdepasseIsSet(true);
      }
    }
  }

}

