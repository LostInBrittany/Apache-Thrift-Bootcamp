/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.arkea.thrift.data.message;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Structure Message
 * 
 */
public class Message implements org.apache.thrift.TBase<Message, Message._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Message");

  private static final org.apache.thrift.protocol.TField CONTENU_FIELD_DESC = new org.apache.thrift.protocol.TField("contenu", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField UTILISATEUR_FIELD_DESC = new org.apache.thrift.protocol.TField("utilisateur", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MessageTupleSchemeFactory());
  }

  private String contenu; // required
  private com.arkea.thrift.data.utilisateur.Utilisateur utilisateur; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * contenu Message
     */
    CONTENU((short)1, "contenu"),
    /**
     * utilisateur ayant ecrit le Message
     */
    UTILISATEUR((short)2, "utilisateur");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTENU
          return CONTENU;
        case 2: // UTILISATEUR
          return UTILISATEUR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTENU, new org.apache.thrift.meta_data.FieldMetaData("contenu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UTILISATEUR, new org.apache.thrift.meta_data.FieldMetaData("utilisateur", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.arkea.thrift.data.utilisateur.Utilisateur.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Message.class, metaDataMap);
  }

  public Message() {
  }

  public Message(
    String contenu,
    com.arkea.thrift.data.utilisateur.Utilisateur utilisateur)
  {
    this();
    this.contenu = contenu;
    this.utilisateur = utilisateur;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Message(Message other) {
    if (other.isSetContenu()) {
      this.contenu = other.contenu;
    }
    if (other.isSetUtilisateur()) {
      this.utilisateur = new com.arkea.thrift.data.utilisateur.Utilisateur(other.utilisateur);
    }
  }

  public Message deepCopy() {
    return new Message(this);
  }

  @Override
  public void clear() {
    this.contenu = null;
    this.utilisateur = null;
  }

  /**
   * contenu Message
   */
  public String getContenu() {
    return this.contenu;
  }

  /**
   * contenu Message
   */
  public void setContenu(String contenu) {
    this.contenu = contenu;
  }

  public void unsetContenu() {
    this.contenu = null;
  }

  /** Returns true if field contenu is set (has been assigned a value) and false otherwise */
  public boolean isSetContenu() {
    return this.contenu != null;
  }

  public void setContenuIsSet(boolean value) {
    if (!value) {
      this.contenu = null;
    }
  }

  /**
   * utilisateur ayant ecrit le Message
   */
  public com.arkea.thrift.data.utilisateur.Utilisateur getUtilisateur() {
    return this.utilisateur;
  }

  /**
   * utilisateur ayant ecrit le Message
   */
  public void setUtilisateur(com.arkea.thrift.data.utilisateur.Utilisateur utilisateur) {
    this.utilisateur = utilisateur;
  }

  public void unsetUtilisateur() {
    this.utilisateur = null;
  }

  /** Returns true if field utilisateur is set (has been assigned a value) and false otherwise */
  public boolean isSetUtilisateur() {
    return this.utilisateur != null;
  }

  public void setUtilisateurIsSet(boolean value) {
    if (!value) {
      this.utilisateur = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTENU:
      if (value == null) {
        unsetContenu();
      } else {
        setContenu((String)value);
      }
      break;

    case UTILISATEUR:
      if (value == null) {
        unsetUtilisateur();
      } else {
        setUtilisateur((com.arkea.thrift.data.utilisateur.Utilisateur)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTENU:
      return getContenu();

    case UTILISATEUR:
      return getUtilisateur();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTENU:
      return isSetContenu();
    case UTILISATEUR:
      return isSetUtilisateur();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Message)
      return this.equals((Message)that);
    return false;
  }

  public boolean equals(Message that) {
    if (that == null)
      return false;

    boolean this_present_contenu = true && this.isSetContenu();
    boolean that_present_contenu = true && that.isSetContenu();
    if (this_present_contenu || that_present_contenu) {
      if (!(this_present_contenu && that_present_contenu))
        return false;
      if (!this.contenu.equals(that.contenu))
        return false;
    }

    boolean this_present_utilisateur = true && this.isSetUtilisateur();
    boolean that_present_utilisateur = true && that.isSetUtilisateur();
    if (this_present_utilisateur || that_present_utilisateur) {
      if (!(this_present_utilisateur && that_present_utilisateur))
        return false;
      if (!this.utilisateur.equals(that.utilisateur))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_contenu = true && (isSetContenu());
    builder.append(present_contenu);
    if (present_contenu)
      builder.append(contenu);

    boolean present_utilisateur = true && (isSetUtilisateur());
    builder.append(present_utilisateur);
    if (present_utilisateur)
      builder.append(utilisateur);

    return builder.toHashCode();
  }

  public int compareTo(Message other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Message typedOther = (Message)other;

    lastComparison = Boolean.valueOf(isSetContenu()).compareTo(typedOther.isSetContenu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContenu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contenu, typedOther.contenu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUtilisateur()).compareTo(typedOther.isSetUtilisateur());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUtilisateur()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.utilisateur, typedOther.utilisateur);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Message(");
    boolean first = true;

    sb.append("contenu:");
    if (this.contenu == null) {
      sb.append("null");
    } else {
      sb.append(this.contenu);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("utilisateur:");
    if (this.utilisateur == null) {
      sb.append("null");
    } else {
      sb.append(this.utilisateur);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageStandardSchemeFactory implements SchemeFactory {
    public MessageStandardScheme getScheme() {
      return new MessageStandardScheme();
    }
  }

  private static class MessageStandardScheme extends StandardScheme<Message> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTENU
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contenu = iprot.readString();
              struct.setContenuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UTILISATEUR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.utilisateur = new com.arkea.thrift.data.utilisateur.Utilisateur();
              struct.utilisateur.read(iprot);
              struct.setUtilisateurIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Message struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.contenu != null) {
        oprot.writeFieldBegin(CONTENU_FIELD_DESC);
        oprot.writeString(struct.contenu);
        oprot.writeFieldEnd();
      }
      if (struct.utilisateur != null) {
        oprot.writeFieldBegin(UTILISATEUR_FIELD_DESC);
        struct.utilisateur.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageTupleSchemeFactory implements SchemeFactory {
    public MessageTupleScheme getScheme() {
      return new MessageTupleScheme();
    }
  }

  private static class MessageTupleScheme extends TupleScheme<Message> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetContenu()) {
        optionals.set(0);
      }
      if (struct.isSetUtilisateur()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetContenu()) {
        oprot.writeString(struct.contenu);
      }
      if (struct.isSetUtilisateur()) {
        struct.utilisateur.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.contenu = iprot.readString();
        struct.setContenuIsSet(true);
      }
      if (incoming.get(1)) {
        struct.utilisateur = new com.arkea.thrift.data.utilisateur.Utilisateur();
        struct.utilisateur.read(iprot);
        struct.setUtilisateurIsSet(true);
      }
    }
  }

}

