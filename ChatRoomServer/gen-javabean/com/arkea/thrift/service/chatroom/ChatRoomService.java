/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.arkea.thrift.service.chatroom;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ChatRoomService {

  /**
   * Service ChatRoomService
   */
  public interface Iface {

    /**
     * Recup√©rer la liste des Messages
     */
    public List<com.arkea.thrift.data.message.Message> getListeMessage() throws org.apache.thrift.TException;

    /**
     * Envoyer un message
     * 
     * @param message
     */
    public void envoyerMessage(com.arkea.thrift.data.message.Message message) throws org.apache.thrift.TException;

    /**
     * Enregistrer un utilisateur
     * 
     * @param utilisateur
     */
    public void enregistrerUtilisateur(com.arkea.thrift.data.utilisateur.Utilisateur utilisateur) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getListeMessage(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getListeMessage_call> resultHandler) throws org.apache.thrift.TException;

    public void envoyerMessage(com.arkea.thrift.data.message.Message message, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.envoyerMessage_call> resultHandler) throws org.apache.thrift.TException;

    public void enregistrerUtilisateur(com.arkea.thrift.data.utilisateur.Utilisateur utilisateur, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.enregistrerUtilisateur_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.arkea.thrift.data.message.Message> getListeMessage() throws org.apache.thrift.TException
    {
      send_getListeMessage();
      return recv_getListeMessage();
    }

    public void send_getListeMessage() throws org.apache.thrift.TException
    {
      getListeMessage_args args = new getListeMessage_args();
      sendBase("getListeMessage", args);
    }

    public List<com.arkea.thrift.data.message.Message> recv_getListeMessage() throws org.apache.thrift.TException
    {
      getListeMessage_result result = new getListeMessage_result();
      receiveBase(result, "getListeMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getListeMessage failed: unknown result");
    }

    public void envoyerMessage(com.arkea.thrift.data.message.Message message) throws org.apache.thrift.TException
    {
      send_envoyerMessage(message);
      recv_envoyerMessage();
    }

    public void send_envoyerMessage(com.arkea.thrift.data.message.Message message) throws org.apache.thrift.TException
    {
      envoyerMessage_args args = new envoyerMessage_args();
      args.setMessage(message);
      sendBase("envoyerMessage", args);
    }

    public void recv_envoyerMessage() throws org.apache.thrift.TException
    {
      envoyerMessage_result result = new envoyerMessage_result();
      receiveBase(result, "envoyerMessage");
      return;
    }

    public void enregistrerUtilisateur(com.arkea.thrift.data.utilisateur.Utilisateur utilisateur) throws org.apache.thrift.TException
    {
      send_enregistrerUtilisateur(utilisateur);
      recv_enregistrerUtilisateur();
    }

    public void send_enregistrerUtilisateur(com.arkea.thrift.data.utilisateur.Utilisateur utilisateur) throws org.apache.thrift.TException
    {
      enregistrerUtilisateur_args args = new enregistrerUtilisateur_args();
      args.setUtilisateur(utilisateur);
      sendBase("enregistrerUtilisateur", args);
    }

    public void recv_enregistrerUtilisateur() throws org.apache.thrift.TException
    {
      enregistrerUtilisateur_result result = new enregistrerUtilisateur_result();
      receiveBase(result, "enregistrerUtilisateur");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getListeMessage(org.apache.thrift.async.AsyncMethodCallback<getListeMessage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getListeMessage_call method_call = new getListeMessage_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getListeMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getListeMessage_call(org.apache.thrift.async.AsyncMethodCallback<getListeMessage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListeMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getListeMessage_args args = new getListeMessage_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.arkea.thrift.data.message.Message> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getListeMessage();
      }
    }

    public void envoyerMessage(com.arkea.thrift.data.message.Message message, org.apache.thrift.async.AsyncMethodCallback<envoyerMessage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      envoyerMessage_call method_call = new envoyerMessage_call(message, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class envoyerMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.arkea.thrift.data.message.Message message;
      public envoyerMessage_call(com.arkea.thrift.data.message.Message message, org.apache.thrift.async.AsyncMethodCallback<envoyerMessage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.message = message;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("envoyerMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        envoyerMessage_args args = new envoyerMessage_args();
        args.setMessage(message);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_envoyerMessage();
      }
    }

    public void enregistrerUtilisateur(com.arkea.thrift.data.utilisateur.Utilisateur utilisateur, org.apache.thrift.async.AsyncMethodCallback<enregistrerUtilisateur_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      enregistrerUtilisateur_call method_call = new enregistrerUtilisateur_call(utilisateur, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class enregistrerUtilisateur_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.arkea.thrift.data.utilisateur.Utilisateur utilisateur;
      public enregistrerUtilisateur_call(com.arkea.thrift.data.utilisateur.Utilisateur utilisateur, org.apache.thrift.async.AsyncMethodCallback<enregistrerUtilisateur_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.utilisateur = utilisateur;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("enregistrerUtilisateur", org.apache.thrift.protocol.TMessageType.CALL, 0));
        enregistrerUtilisateur_args args = new enregistrerUtilisateur_args();
        args.setUtilisateur(utilisateur);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_enregistrerUtilisateur();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getListeMessage", new getListeMessage());
      processMap.put("envoyerMessage", new envoyerMessage());
      processMap.put("enregistrerUtilisateur", new enregistrerUtilisateur());
      return processMap;
    }

    private static class getListeMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getListeMessage_args> {
      public getListeMessage() {
        super("getListeMessage");
      }

      protected getListeMessage_args getEmptyArgsInstance() {
        return new getListeMessage_args();
      }

      protected getListeMessage_result getResult(I iface, getListeMessage_args args) throws org.apache.thrift.TException {
        getListeMessage_result result = new getListeMessage_result();
        result.success = iface.getListeMessage();
        return result;
      }
    }

    private static class envoyerMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, envoyerMessage_args> {
      public envoyerMessage() {
        super("envoyerMessage");
      }

      protected envoyerMessage_args getEmptyArgsInstance() {
        return new envoyerMessage_args();
      }

      protected envoyerMessage_result getResult(I iface, envoyerMessage_args args) throws org.apache.thrift.TException {
        envoyerMessage_result result = new envoyerMessage_result();
        iface.envoyerMessage(args.message);
        return result;
      }
    }

    private static class enregistrerUtilisateur<I extends Iface> extends org.apache.thrift.ProcessFunction<I, enregistrerUtilisateur_args> {
      public enregistrerUtilisateur() {
        super("enregistrerUtilisateur");
      }

      protected enregistrerUtilisateur_args getEmptyArgsInstance() {
        return new enregistrerUtilisateur_args();
      }

      protected enregistrerUtilisateur_result getResult(I iface, enregistrerUtilisateur_args args) throws org.apache.thrift.TException {
        enregistrerUtilisateur_result result = new enregistrerUtilisateur_result();
        iface.enregistrerUtilisateur(args.utilisateur);
        return result;
      }
    }

  }

  public static class getListeMessage_args implements org.apache.thrift.TBase<getListeMessage_args, getListeMessage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListeMessage_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListeMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListeMessage_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListeMessage_args.class, metaDataMap);
    }

    public getListeMessage_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListeMessage_args(getListeMessage_args other) {
    }

    public getListeMessage_args deepCopy() {
      return new getListeMessage_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListeMessage_args)
        return this.equals((getListeMessage_args)that);
      return false;
    }

    public boolean equals(getListeMessage_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      return builder.toHashCode();
    }

    public int compareTo(getListeMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListeMessage_args typedOther = (getListeMessage_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListeMessage_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListeMessage_argsStandardSchemeFactory implements SchemeFactory {
      public getListeMessage_argsStandardScheme getScheme() {
        return new getListeMessage_argsStandardScheme();
      }
    }

    private static class getListeMessage_argsStandardScheme extends StandardScheme<getListeMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListeMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListeMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListeMessage_argsTupleSchemeFactory implements SchemeFactory {
      public getListeMessage_argsTupleScheme getScheme() {
        return new getListeMessage_argsTupleScheme();
      }
    }

    private static class getListeMessage_argsTupleScheme extends TupleScheme<getListeMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListeMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListeMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getListeMessage_result implements org.apache.thrift.TBase<getListeMessage_result, getListeMessage_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListeMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListeMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListeMessage_resultTupleSchemeFactory());
    }

    private List<com.arkea.thrift.data.message.Message> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.arkea.thrift.data.message.Message.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListeMessage_result.class, metaDataMap);
    }

    public getListeMessage_result() {
    }

    public getListeMessage_result(
      List<com.arkea.thrift.data.message.Message> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListeMessage_result(getListeMessage_result other) {
      if (other.isSetSuccess()) {
        List<com.arkea.thrift.data.message.Message> __this__success = new ArrayList<com.arkea.thrift.data.message.Message>();
        for (com.arkea.thrift.data.message.Message other_element : other.success) {
          __this__success.add(new com.arkea.thrift.data.message.Message(other_element));
        }
        this.success = __this__success;
      }
    }

    public getListeMessage_result deepCopy() {
      return new getListeMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.arkea.thrift.data.message.Message> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.arkea.thrift.data.message.Message elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.arkea.thrift.data.message.Message>();
      }
      this.success.add(elem);
    }

    public List<com.arkea.thrift.data.message.Message> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.arkea.thrift.data.message.Message> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.arkea.thrift.data.message.Message>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListeMessage_result)
        return this.equals((getListeMessage_result)that);
      return false;
    }

    public boolean equals(getListeMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(getListeMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListeMessage_result typedOther = (getListeMessage_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListeMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListeMessage_resultStandardSchemeFactory implements SchemeFactory {
      public getListeMessage_resultStandardScheme getScheme() {
        return new getListeMessage_resultStandardScheme();
      }
    }

    private static class getListeMessage_resultStandardScheme extends StandardScheme<getListeMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListeMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.arkea.thrift.data.message.Message>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    com.arkea.thrift.data.message.Message _elem2; // required
                    _elem2 = new com.arkea.thrift.data.message.Message();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListeMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.arkea.thrift.data.message.Message _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListeMessage_resultTupleSchemeFactory implements SchemeFactory {
      public getListeMessage_resultTupleScheme getScheme() {
        return new getListeMessage_resultTupleScheme();
      }
    }

    private static class getListeMessage_resultTupleScheme extends TupleScheme<getListeMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListeMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.arkea.thrift.data.message.Message _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListeMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.arkea.thrift.data.message.Message>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              com.arkea.thrift.data.message.Message _elem7; // required
              _elem7 = new com.arkea.thrift.data.message.Message();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class envoyerMessage_args implements org.apache.thrift.TBase<envoyerMessage_args, envoyerMessage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("envoyerMessage_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new envoyerMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new envoyerMessage_argsTupleSchemeFactory());
    }

    private com.arkea.thrift.data.message.Message message; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE((short)1, "message");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE
            return MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.arkea.thrift.data.message.Message.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(envoyerMessage_args.class, metaDataMap);
    }

    public envoyerMessage_args() {
    }

    public envoyerMessage_args(
      com.arkea.thrift.data.message.Message message)
    {
      this();
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public envoyerMessage_args(envoyerMessage_args other) {
      if (other.isSetMessage()) {
        this.message = new com.arkea.thrift.data.message.Message(other.message);
      }
    }

    public envoyerMessage_args deepCopy() {
      return new envoyerMessage_args(this);
    }

    @Override
    public void clear() {
      this.message = null;
    }

    public com.arkea.thrift.data.message.Message getMessage() {
      return this.message;
    }

    public void setMessage(com.arkea.thrift.data.message.Message message) {
      this.message = message;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((com.arkea.thrift.data.message.Message)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE:
        return getMessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE:
        return isSetMessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof envoyerMessage_args)
        return this.equals((envoyerMessage_args)that);
      return false;
    }

    public boolean equals(envoyerMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_message = true && (isSetMessage());
      builder.append(present_message);
      if (present_message)
        builder.append(message);

      return builder.toHashCode();
    }

    public int compareTo(envoyerMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      envoyerMessage_args typedOther = (envoyerMessage_args)other;

      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("envoyerMessage_args(");
      boolean first = true;

      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class envoyerMessage_argsStandardSchemeFactory implements SchemeFactory {
      public envoyerMessage_argsStandardScheme getScheme() {
        return new envoyerMessage_argsStandardScheme();
      }
    }

    private static class envoyerMessage_argsStandardScheme extends StandardScheme<envoyerMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, envoyerMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.message = new com.arkea.thrift.data.message.Message();
                struct.message.read(iprot);
                struct.setMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, envoyerMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          struct.message.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class envoyerMessage_argsTupleSchemeFactory implements SchemeFactory {
      public envoyerMessage_argsTupleScheme getScheme() {
        return new envoyerMessage_argsTupleScheme();
      }
    }

    private static class envoyerMessage_argsTupleScheme extends TupleScheme<envoyerMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, envoyerMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMessage()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMessage()) {
          struct.message.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, envoyerMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.message = new com.arkea.thrift.data.message.Message();
          struct.message.read(iprot);
          struct.setMessageIsSet(true);
        }
      }
    }

  }

  public static class envoyerMessage_result implements org.apache.thrift.TBase<envoyerMessage_result, envoyerMessage_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("envoyerMessage_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new envoyerMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new envoyerMessage_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(envoyerMessage_result.class, metaDataMap);
    }

    public envoyerMessage_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public envoyerMessage_result(envoyerMessage_result other) {
    }

    public envoyerMessage_result deepCopy() {
      return new envoyerMessage_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof envoyerMessage_result)
        return this.equals((envoyerMessage_result)that);
      return false;
    }

    public boolean equals(envoyerMessage_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      return builder.toHashCode();
    }

    public int compareTo(envoyerMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      envoyerMessage_result typedOther = (envoyerMessage_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("envoyerMessage_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class envoyerMessage_resultStandardSchemeFactory implements SchemeFactory {
      public envoyerMessage_resultStandardScheme getScheme() {
        return new envoyerMessage_resultStandardScheme();
      }
    }

    private static class envoyerMessage_resultStandardScheme extends StandardScheme<envoyerMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, envoyerMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, envoyerMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class envoyerMessage_resultTupleSchemeFactory implements SchemeFactory {
      public envoyerMessage_resultTupleScheme getScheme() {
        return new envoyerMessage_resultTupleScheme();
      }
    }

    private static class envoyerMessage_resultTupleScheme extends TupleScheme<envoyerMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, envoyerMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, envoyerMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class enregistrerUtilisateur_args implements org.apache.thrift.TBase<enregistrerUtilisateur_args, enregistrerUtilisateur_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enregistrerUtilisateur_args");

    private static final org.apache.thrift.protocol.TField UTILISATEUR_FIELD_DESC = new org.apache.thrift.protocol.TField("utilisateur", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enregistrerUtilisateur_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enregistrerUtilisateur_argsTupleSchemeFactory());
    }

    private com.arkea.thrift.data.utilisateur.Utilisateur utilisateur; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UTILISATEUR((short)1, "utilisateur");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UTILISATEUR
            return UTILISATEUR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UTILISATEUR, new org.apache.thrift.meta_data.FieldMetaData("utilisateur", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.arkea.thrift.data.utilisateur.Utilisateur.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enregistrerUtilisateur_args.class, metaDataMap);
    }

    public enregistrerUtilisateur_args() {
    }

    public enregistrerUtilisateur_args(
      com.arkea.thrift.data.utilisateur.Utilisateur utilisateur)
    {
      this();
      this.utilisateur = utilisateur;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enregistrerUtilisateur_args(enregistrerUtilisateur_args other) {
      if (other.isSetUtilisateur()) {
        this.utilisateur = new com.arkea.thrift.data.utilisateur.Utilisateur(other.utilisateur);
      }
    }

    public enregistrerUtilisateur_args deepCopy() {
      return new enregistrerUtilisateur_args(this);
    }

    @Override
    public void clear() {
      this.utilisateur = null;
    }

    public com.arkea.thrift.data.utilisateur.Utilisateur getUtilisateur() {
      return this.utilisateur;
    }

    public void setUtilisateur(com.arkea.thrift.data.utilisateur.Utilisateur utilisateur) {
      this.utilisateur = utilisateur;
    }

    public void unsetUtilisateur() {
      this.utilisateur = null;
    }

    /** Returns true if field utilisateur is set (has been assigned a value) and false otherwise */
    public boolean isSetUtilisateur() {
      return this.utilisateur != null;
    }

    public void setUtilisateurIsSet(boolean value) {
      if (!value) {
        this.utilisateur = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UTILISATEUR:
        if (value == null) {
          unsetUtilisateur();
        } else {
          setUtilisateur((com.arkea.thrift.data.utilisateur.Utilisateur)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UTILISATEUR:
        return getUtilisateur();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UTILISATEUR:
        return isSetUtilisateur();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enregistrerUtilisateur_args)
        return this.equals((enregistrerUtilisateur_args)that);
      return false;
    }

    public boolean equals(enregistrerUtilisateur_args that) {
      if (that == null)
        return false;

      boolean this_present_utilisateur = true && this.isSetUtilisateur();
      boolean that_present_utilisateur = true && that.isSetUtilisateur();
      if (this_present_utilisateur || that_present_utilisateur) {
        if (!(this_present_utilisateur && that_present_utilisateur))
          return false;
        if (!this.utilisateur.equals(that.utilisateur))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_utilisateur = true && (isSetUtilisateur());
      builder.append(present_utilisateur);
      if (present_utilisateur)
        builder.append(utilisateur);

      return builder.toHashCode();
    }

    public int compareTo(enregistrerUtilisateur_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      enregistrerUtilisateur_args typedOther = (enregistrerUtilisateur_args)other;

      lastComparison = Boolean.valueOf(isSetUtilisateur()).compareTo(typedOther.isSetUtilisateur());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUtilisateur()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.utilisateur, typedOther.utilisateur);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enregistrerUtilisateur_args(");
      boolean first = true;

      sb.append("utilisateur:");
      if (this.utilisateur == null) {
        sb.append("null");
      } else {
        sb.append(this.utilisateur);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enregistrerUtilisateur_argsStandardSchemeFactory implements SchemeFactory {
      public enregistrerUtilisateur_argsStandardScheme getScheme() {
        return new enregistrerUtilisateur_argsStandardScheme();
      }
    }

    private static class enregistrerUtilisateur_argsStandardScheme extends StandardScheme<enregistrerUtilisateur_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enregistrerUtilisateur_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UTILISATEUR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.utilisateur = new com.arkea.thrift.data.utilisateur.Utilisateur();
                struct.utilisateur.read(iprot);
                struct.setUtilisateurIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enregistrerUtilisateur_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.utilisateur != null) {
          oprot.writeFieldBegin(UTILISATEUR_FIELD_DESC);
          struct.utilisateur.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enregistrerUtilisateur_argsTupleSchemeFactory implements SchemeFactory {
      public enregistrerUtilisateur_argsTupleScheme getScheme() {
        return new enregistrerUtilisateur_argsTupleScheme();
      }
    }

    private static class enregistrerUtilisateur_argsTupleScheme extends TupleScheme<enregistrerUtilisateur_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enregistrerUtilisateur_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUtilisateur()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUtilisateur()) {
          struct.utilisateur.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enregistrerUtilisateur_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.utilisateur = new com.arkea.thrift.data.utilisateur.Utilisateur();
          struct.utilisateur.read(iprot);
          struct.setUtilisateurIsSet(true);
        }
      }
    }

  }

  public static class enregistrerUtilisateur_result implements org.apache.thrift.TBase<enregistrerUtilisateur_result, enregistrerUtilisateur_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enregistrerUtilisateur_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enregistrerUtilisateur_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enregistrerUtilisateur_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enregistrerUtilisateur_result.class, metaDataMap);
    }

    public enregistrerUtilisateur_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enregistrerUtilisateur_result(enregistrerUtilisateur_result other) {
    }

    public enregistrerUtilisateur_result deepCopy() {
      return new enregistrerUtilisateur_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enregistrerUtilisateur_result)
        return this.equals((enregistrerUtilisateur_result)that);
      return false;
    }

    public boolean equals(enregistrerUtilisateur_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      return builder.toHashCode();
    }

    public int compareTo(enregistrerUtilisateur_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      enregistrerUtilisateur_result typedOther = (enregistrerUtilisateur_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enregistrerUtilisateur_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enregistrerUtilisateur_resultStandardSchemeFactory implements SchemeFactory {
      public enregistrerUtilisateur_resultStandardScheme getScheme() {
        return new enregistrerUtilisateur_resultStandardScheme();
      }
    }

    private static class enregistrerUtilisateur_resultStandardScheme extends StandardScheme<enregistrerUtilisateur_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enregistrerUtilisateur_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enregistrerUtilisateur_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enregistrerUtilisateur_resultTupleSchemeFactory implements SchemeFactory {
      public enregistrerUtilisateur_resultTupleScheme getScheme() {
        return new enregistrerUtilisateur_resultTupleScheme();
      }
    }

    private static class enregistrerUtilisateur_resultTupleScheme extends TupleScheme<enregistrerUtilisateur_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enregistrerUtilisateur_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enregistrerUtilisateur_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
